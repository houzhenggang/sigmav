#############################################################################
# Makefile for building hello
# Generated by tmake at 20:24, 2010/09/25
#     Project: hello
#    Template: app
#############################################################################

####### Compiler, tools and options

CC	=	gcc
CXX	=	g++
CFLAGS	=	-pipe -Wall -W -O2 -DNO_DEBUG
CXXFLAGS=	-pipe -DQWS -fno-exceptions -fno-rtti -Wall -W -O2 -DNO_DEBUG
INCPATH	=	-I$(QTDIR)/include -I$(QPEDIR)/include
LINK	=	g++
LFLAGS	=	
LIBS	=	$(SUBLIBS) -L$(QPEDIR)/lib -L$(QTDIR)/lib -lqpe -lqtopia -lqte
MOC	=	$(QTDIR)/bin/moc
UIC	=	$(QTDIR)/bin/uic

TAR	=	tar -cf
GZIP	=	gzip -9f

####### Files

HEADERS =	hello.h
SOURCES =	hello.cpp \
		main.cpp
OBJECTS =	hello.o \
		main.o \
		hello.o
INTERFACES =	hello.ui
UICDECLS =	hello.h
UICIMPLS =	hello.cpp
SRCMOC	=	moc_hello.cpp \
		moc_hello.cpp
OBJMOC	=	moc_hello.o \
		moc_hello.o
DIST	=	
TARGET	=	hello
INTERFACE_DECL_PATH = .

####### Implicit rules

.SUFFIXES: .cpp .cxx .cc .C .c

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules


all: $(TARGET)

$(TARGET): $(UICDECLS) $(OBJECTS) $(OBJMOC) 
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS)

moc: $(SRCMOC)

tmake: Makefile

Makefile: hello.pro
	tmake hello.pro -o Makefile

dist:
	$(TAR) hello.tar hello.pro $(SOURCES) $(HEADERS) $(INTERFACES) $(DIST)
	$(GZIP) hello.tar

clean:
	-rm -f $(OBJECTS) $(OBJMOC) $(SRCMOC) $(UICIMPLS) $(UICDECLS) $(TARGET)
	-rm -f *~ core

####### Sub-libraries


###### Combined headers


####### Compile

hello.o: hello.cpp \
		hello.h \
		hello.ui

main.o: main.cpp \
		hello.h \
		/opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qtopia/include/qtopia/qpeapplication.h

hello.h: hello.ui
	$(UIC) hello.ui -o $(INTERFACE_DECL_PATH)/hello.h

hello.cpp: hello.ui
	$(UIC) hello.ui -i hello.h -o hello.cpp

hello.o: hello.cpp \
		hello.h \
		hello.ui

moc_hello.o: moc_hello.cpp \
		hello.h

moc_hello.o: moc_hello.cpp \
		hello.h

moc_hello.cpp: hello.h
	$(MOC) hello.h -o moc_hello.cpp

moc_hello.cpp: hello.h
	$(MOC) hello.h -o moc_hello.cpp

