#include<stdio.h>
#define BUFFSIZE 64
#define IRSIZE 16
int checkBlank(char * ptr)
{
    while(*ptr!='\0'&&(*ptr==' '||*ptr=='\t'||*ptr=='\n'))
    {
        ptr++;
    }
    if(*ptr=='\0')
    {
        return 1;
    }
    return 0;
}
int checkBegin(char * ir_buff)
{
    char * begin="begin";
    char * ptr=ir_buff;
    int counter=0;
    while(*(ptr++)!='.') ;
    for (counter=0;counter<5;counter++,ptr++)
    {
        if(*ptr!=begin[counter]&&*ptr!=begin[counter]-32)
        {
            return 0;
        }
    }
    if(checkBlank(ptr))
    {
        return 1;
    }
    return 0;

}
int checkEnd(char * ir_buff)
{
    char * end="end";
    char * ptr=ir_buff;
    int counter=0;
    while(*(ptr++)!='.') ;
    for (counter=0;counter<3;counter++,ptr++)
    {
        if(*ptr!=end[counter]&&*ptr!=end[counter]-32)
        {
            return 0;
        }
    }
    if(checkBlank(ptr))
    {
        return 1;
    }
    return 0;
}

void decode(char * ir_buff,char * ir_decoder)
{

}
int main(int argc,char * argv[])
{
    FILE * ifp;                   //Input file pointer;
    FILE * ofp;                   //Output file pointer;
    char ir_buff[BUFFSIZE];       //IR buffer
    char ir_decoder[IRSIZE];      //IR decoder
    int  line_num=0;              //Line Number
    int  begin_end=0;             //0 NOT BEGIN 1 BEGINING -1 ENDED
    if(argc<=1)
    {
        printf("No input file!\n");
        return -1;
    }
    else if(argc>1)
    {
        if((ifp=fopen(argv[1],"r"))==NULL)
        {
            printf("Open File %s Error!\n",argv[1]);
            fclose(ifp);
            return -1;
        }
        else
        {
          if((ofp=fopen("out.t","w"))==NULL)
          {
              printf("Can not open output file!\n");
              fclose(ifp);
              fclose(ofp);
              return -1;
          }
          while(fgets(ir_buff,BUFFSIZE,ifp)!=NULL)
          {
              line_num++;
              if((begin_end==0)&&checkBegin(ir_buff))
              {
                  begin_end=1;
                  printf("Begins\n");
              }
              else if(begin_end==1)
              {
                  if(checkEnd(ir_buff))
                  {
                    begin_end=-1;
                    printf("Ends\n");
                    break;
                  }
                  else
                  {
                      printf("%d:%s",line_num,ir_buff);
                  }
              }
          }
          if(begin_end==0)
          {
              printf("No Codes!\n");
          }
          else if (begin_end==1)
          {
              printf("No End error!\n");
          }
          fclose(ofp);
          fclose(ifp);
        }
    }
    else
    {
        return -1;
    }
}
