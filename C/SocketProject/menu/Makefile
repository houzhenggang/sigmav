#############################################################################
# Makefile for building: menu
# Generated by qmake (1.06c-Qtopia) (Qt 3.2.1) on: Sat Sep  4 12:56:03 2010
# Project:  menu.pro
# Template: app
# Command: $(QMAKE) -spec /opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qtopia/mkspecs/qws/linux-generic-g++ -o Makefile menu.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -Wall -W -Os -D_REENTRANT  -DQTOPIA_DATA_LINKING -DQCONFIG=\"qconfig-qpe.h\" -DQTOPIA_TARGET=\"menu\" -DQTOPIA_TRTARGET=\"menu\" -DQT_NO_DEBUG -DQT_THREAD_SUPPORT
CXXFLAGS = -pipe -DQWS -fno-exceptions -fno-rtti -Wall -W -Os -D_REENTRANT  -DQTOPIA_DATA_LINKING -DQCONFIG=\"qconfig-qpe.h\" -DQTOPIA_TARGET=\"menu\" -DQTOPIA_TRTARGET=\"menu\" -DQT_NO_DEBUG -DQT_THREAD_SUPPORT
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qtopia/mkspecs/qws/linux-generic-g++ -I. -I/opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qtopia/include -I/opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qt2/include -I.ui/ -I. -I.moc/
LINK     = g++
LFLAGS   = 
LIBS     = $(SUBLIBS)  -L/opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qtopia/lib -L/opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qt2/lib -lqte-mt -lpthread
AR       = ar cqs
RANLIB   = 
MOC      = /opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qt2/bin/moc
UIC      = /opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qt2/bin/uic
QMAKE    = qmake
TAR      = tar -cf
INSTALL_FILE= install -c
INSTALL_DIR = cp -arf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -R
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = .obj/

####### Files

TRANSLATABLES = 
HEADERS = 
SOURCES = main.cpp
OBJECTS = .obj/main.o \
		.obj/mymenu.o \
		.obj/qmake_image_collection.o
FORMS = mymenu.ui
UICDECLS = .ui/mymenu.h
UICIMPLS = .ui/mymenu.cpp
SRCMOC   = .moc/moc_mymenu.cpp
OBJMOC = .obj/moc_mymenu.o
DIST	   = /opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qtopia/src/projects.pri \
		/opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qtopia/src/ipk_groups.pri \
		menu.pro
QMAKE_TARGET = menu
DESTDIR  = 
TARGET   = menu

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS) $(OBJCOMP)

mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc ; $(MAKE) )

Makefile: menu.pro  /opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qtopia/mkspecs/qws/linux-generic-g++/qmake.conf /opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qtopia/src/projects.pri \
		/opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qtopia/src/ipk_groups.pri
	$(QMAKE) -spec /opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qtopia/mkspecs/qws/linux-generic-g++ -o Makefile menu.pro
qmake: 
	@$(QMAKE) -spec /opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/qtopia/mkspecs/qws/linux-generic-g++ -o Makefile menu.pro

dist: 
	@mkdir -p .obj/menu && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) .obj/menu/ && $(COPY_FILE) --parents 图片/1.jpg 图片/2.jpg 图片/3.jpg 图片/4.jpg 图片/5.jpg 图片/6.jpg 图片/7.jpg .obj/menu/ && $(COPY_FILE) --parents mymenu.ui.h .obj/menu/ && ( cd `dirname .obj/menu` && $(TAR) menu.tar menu && $(GZIP) menu.tar ) && $(MOVE) `dirname .obj/menu`/menu.tar.gz . && $(DEL_FILE) -r .obj/menu

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:
	-$(DEL_FILE) $(UICIMPLS) $(UICDECLS)

yaccclean:
lexclean:
clean: mocclean uiclean
	-$(DEL_FILE) $(OBJECTS)
		-$(DEL_FILE) .ui/qmake_image_collection.cpp
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)


unix_mkipk:
	@ if [ -e /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/data ]; then echo "ERROR: /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/data exists!"; exit 1; fi; if [ -e /media/files/C/socket/menu/ipkg/qpe-menu__x86.ipk ]; then echo "Package qpe-menu__x86.ipk already exists!"; exit 0; fi; IPK_GROUP_PROJECTS="/media/files/C/socket/menu"; for i in $${IPK_GROUP_PROJECTS};do make -C $$i -f Makefile unix_mkipk_deps INSTALL_ROOT=/media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/data/opt/Qtopia || exit $$?; done; make_ipk_file() { cd /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/data; if [ ! -z "$$1" ]; then lang="$$1"; suffix="_i18n_$$lang"; deps="qpe-menu"; if [ "`echo qpe-menu | cut -c -4`" = "qpe-" -a "qpe-menu" != "qpe-taskbar" ]; then deps="$$deps qpe-taskbar_i18n_$$lang"; fi; path="opt/Qtopia/i18n/$$lang"; if [ ! -d "/media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/data/$$path" ]; then return; fi; else suffix=; deps=`cat /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/DEPS`; deps=`echo $$deps | sort -u`; path="opt/Qtopia"; fi; echo "Package: qpe-menu$$suffix" > /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; echo "Maintainer: Unspecified" >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; echo "License: GPL" >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; echo "Version: " >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; echo "Arch: x86" >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; echo "Architecture: x86" >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; echo "Description: No description written for this package" >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; echo -n "Depends: " >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; echo $$deps >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; echo -n "Files:" >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; find $$path -type f -o -type l -printf "/%P " >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; if [ ! -x "`which mkfs.jffs2`" ]; then echo -e "\nInstalled-Size: $$(du -h -s $$path | awk '{print $$1}')" >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; else echo -e "\nInstalled-Size: $$(mkfs.jffs2 -r $$path | wc -c)" >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; fi; echo >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/control; for i in preinst prerm postinst postrm;do export FILE_LOC=/media/files/C/socket/menu/qpe-menu.$$i; if [ -e $$FILE_LOC ]; then install -c $$FILE_LOC /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/$$i; fi; done; cd /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu; echo "2.0" > debian-binary; cd /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control; tar --remove-files -cz --owner=0 --group=0 -f /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control.tar.gz ./control; cd /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/data; tar --remove-files -cz --owner=0 --group=0 -f /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/data.tar.gz $$path; if [ ! -e /media/files/C/socket/menu/ipkg ];then mkdir -p /media/files/C/socket/menu/ipkg;fi; cd /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu; tar --remove-files -cz --owner=0 --group=0 -f /media/files/C/socket/menu/ipkg/qpe-menu__x86$$suffix.ipk ./debian-binary ./control.tar.gz ./data.tar.gz `for i in preinst prerm postinst postrm;do if [ -e $$i ]; then echo $$i; fi; done`; }; LANGUAGES="en_US"; for lang in $${LANGUAGES}; do make_ipk_file $$lang; done; [ -d /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/data/opt/Qtopia/i18n ] && rm -r /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/data/opt/Qtopia/i18n; make_ipk_file; rm -rf /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu

unix_mkipk_deps: install
	@ mkdir -p /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/data; mkdir -p /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control; echo "" | sed 's/\( [^(]\)/,\1/g' >> /media/files/C/socket/menu/.packaging-working-dir/ipk/qpe-menu/control/DEPS

install_target:
	@true

remove_target:
	-$(DEL_FILE) $(TARGET)

packages: unix_mkipk
	

sdk: install
	

devsdk:
	

relink: remove_target
	@ make

lupdate:
	@ cd /media/files/C/socket/menu; TRANSFILES=; TRANSLATABLES="$(TRANSLATABLES)"; for transfile in $$TRANSLATABLES; do [ -f $$transfile ] && TRANSFILES="$$TRANSFILES $$transfile"; done; TRANSLATIONS=""; for lang in $$TRANSLATIONS; do /opt/FriendlyARM/mini2440/x86-qtopia/qtopia-2.2.0-FriendlyARM/dqt/bin/lupdate $$TRANSFILES -ts menu-$$lang.ts; done

FORCE:

####### Compile

.obj/main.o: main.cpp .ui/mymenu.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/main.o main.cpp

.ui/mymenu.h: mymenu.ui 
	$(UIC) mymenu.ui -o .ui/mymenu.h

.ui/mymenu.cpp: .ui/mymenu.h mymenu.ui 
	$(UIC) mymenu.ui -i mymenu.h -o .ui/mymenu.cpp

.obj/mymenu.o: .ui/mymenu.cpp mymenu.ui.h \
		.ui/mymenu.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/mymenu.o .ui/mymenu.cpp

.obj/moc_mymenu.o: .moc/moc_mymenu.cpp .ui/mymenu.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_mymenu.o .moc/moc_mymenu.cpp

.moc/moc_mymenu.cpp: $(MOC) .ui/mymenu.h
	$(MOC) .ui/mymenu.h -o .moc/moc_mymenu.cpp

.obj/qmake_image_collection.o: .ui/qmake_image_collection.cpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/qmake_image_collection.o .ui/qmake_image_collection.cpp

.ui/qmake_image_collection.cpp: 
	$(UIC)  -embed menu  -o .ui/qmake_image_collection.cpp

####### Install

install:  

uninstall:  

